@page "/fetchoperations"
@inherits OperationsDataModel

<h1>Operation(s) Data</h1>
<p>This component demonstrates CRUD operation on Operations/Device data</p>

<div class="row">
    <div class="col-md-6">
        <button @onclick="Open" class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Operation
        </button>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search operation by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterOps" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-info" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />


@if (opsList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (opsList.Count > 0)
    {


        <table class="table table-striped align-middle table-bordered">
            <thead class="table-success">
                <tr class="text-center">
                    <th>ID</th>
                    <th>Name</th>
                    <th>Ops Order</th>
                    <th>Device</th>
                   @* <th>Image</th>*@

                </tr>
            </thead>
            <tbody>
                @foreach (var ops in opsList)
                {
                    <tr class="text-center">
                        <td>@ops.OperationId</td>
                        <td>@ops.Name</td>
                        <td>@ops.OperationOrder</td>
                        <td>@ops.Device.Name</td>
                       @* <td>@ops.ImageData</td>*@
                        <td>
                           @* <a href='/employee/edit/@ops.OperationId' class="btn btn-outline-dark" role="button">Edit</a>*@
                            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteOpsModal"
                                    @onclick="(() => DeleteConfirm(ops.OperationId))">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="modal" id="deleteOpsModal"  style="display:@modalDisplay; overflow-y: auto;" data-bs-backdrop="static" data-bs-keyboard="false">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                       
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <h4>Do you want to delete this Operation ??</h4>
                       
                                   <label>Name: @ops.Name</label> 
                                    

                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger" @onclick="(async () => await DeleteOperation(ops.OperationId))" data-bs-dismiss="modal">YES</button>
                        <button class="btn btn-warning" @onclick="Close" data-bs-dismiss="modal">No</button>
                    </div>
                </div>
            </div>
        </div>

    }
    else
    {
        <div class="d-flex justify-content-center">
            <h4>No record found</h4>
        </div>
    }
    @if (popup)
    {
        <div class="modal" tabindex="-1" style="display:block; overflow-y: auto;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add Operation</h3>
                        <button type="button" @onclick="Close" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@ops" OnValidSubmit="SaveOperation">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label for="Name" class="form-label">Name</label>
                                <div class="col-md-4">
                                    <InputText class="form-control" @bind-Value="ops.Name" />
                                </div>
                                <ValidationMessage For="@(() => ops.Name)" />
                            </div>
                            <div class="mb-3">
                                <label for="Order" class="form-label">Order which to perform</label>
                                <div class="col-md-4">

                                    <InputNumber type="number"  class="form-control" @bind-Value="ops.OperationOrder" />

                                </div>
                                <ValidationMessage For="@(() => ops.OperationOrder)" />
                            </div>
                            <div class="mb-3">
                                <label for="Order" class="form-label">Image</label>
                                <div class="col-md-4">
                                    @for (int i = 0; i < numberOfInputFiles; i++)
                                    {
                                        <InputFile @key="i" OnChange="OnFileChanged" multiple style="@GetInputFileStyle(i)"></InputFile>
                                    }

                                    <pre>@status</pre>
                                </div>

                            </div>

                            <div class="mb-3">
                                <label for="City" class="form-label">Device</label>
                                <div class="col-md-4">
                                    <InputSelect class="form-control" @bind-Value="ops.DeviceId">
                                        <option value="-- Select Device --">-- Select Device --</option>
                                        @foreach (var device in deviceList)
                                        {
                                    <option value="@device.DeviceId">@device.DeviceType</option>
                                        }
                            </InputSelect>
                        </div>
                        <div class="mb-3">

                        </div>
                        <ValidationMessage For="@(() => ops.DeviceId)" />
                    </div>
                    <div class="form-group">
                      <div class="form-group">
        <button type="submit" data-dismiss="modal" @onclick="Close"  class="btn btn-primary">Save</button>
        <button type="button" data-dismiss="modal" @onclick="Close" class="btn btn-light">Cancel</button>
    </div>
                    </div>
                </EditForm>
                      
                    </div>
              
                </div>
            </div>
        </div>

    }
    @code{
        
    private string modalDisplay = "none;";
    private string modalClass = "fade";
    private bool showBackdrop = false; 
    bool popup = false;
   
    void DeleteConfirm(int opsID)
    {
        ops = opsList.FirstOrDefault(x => x.OperationId == opsID);
        Open();
    }
    public void Open()
    {
        if (ops != null )
        {
            modalDisplay = "block;";
            modalClass = "show";
            showBackdrop = true;
            popup = false;
        }
        else 
        {
            popup = true;
            modalDisplay = "none;";
            modalClass = "fade";
            showBackdrop = true;
        }

    }

    public void Close()
    {
        modalDisplay = "none";
        modalClass = "";
        showBackdrop = false;
    }

    string? status;
    int numberOfInputFiles = 1;

    string GetInputFileStyle(int index)
    {
        return index == numberOfInputFiles - 1 ? "" : "display: none";
    }

    async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        // Create a new InputFile component
        numberOfInputFiles++;

        // Handle selected files
        status += "\nChanged";
        try
        {
            var buffer = new byte[4096];
            foreach (var file in e.GetMultipleFiles(e.FileCount))
            {
                status += "\nReading file: " + file.Name;
                using var stream = file.OpenReadStream(maxAllowedSize: long.MaxValue);
                while (true)
                {
                    var read = await stream.ReadAsync(buffer);
                    if (read == 0)
                        break;
                }

                status += "\nRead file: " + file.Name;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            status += "\nError: " + ex.Message;
            await InvokeAsync(StateHasChanged);
        }
    }
}

}